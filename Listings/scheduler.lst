C51 COMPILER V9.60.0.0   SCHEDULER                                                         06/28/2022 07:49:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SCHEDULER
OBJECT MODULE PLACED IN .\Objects\scheduler.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE Src\scheduler\scheduler.c LARGE OMF2 OPTIMIZE(0,SPEED) BROWSE
                    - DEFINE(STC) DEBUG PRINT(.\Listings\scheduler.lst) TABS(2) OBJECT(.\Objects\scheduler.obj)

line level    source

   1          #include "scheduler.h"
   2          #include "../mem/mem.h"
   3          #include "../conc/semaphore.h"
   4          #include "../bit_ops/bit_ops.h"
   5          #include "../error/error.h"
   6          #include "../events/events.h"
   7          #include "../clock_util/clock_util.h"
   8          
   9          
  10          XDATA u8 current_process = 0;
  11          XDATA u32 system_cycles = 0;
  12          XDATA u8 process_slot = 1;
  13          
  14          XDATA u8 remaining_timeslices = DEFAULT_TIMESLICES;
  15          XDATA u8 proc_time_share[8] = {
  16              DEFAULT_TIMESLICES, DEFAULT_TIMESLICES,
  17              DEFAULT_TIMESLICES, DEFAULT_TIMESLICES,
  18              DEFAULT_TIMESLICES, DEFAULT_TIMESLICES,
  19              DEFAULT_TIMESLICES, DEFAULT_TIMESLICES
  20          };//This determines the number of timeslices assigned when each process is scheduled
  21          
  22          //Only processes with 0 sleep countdown can be scheduled
  23          XDATA u16 proc_sleep_countdown[8] ={0, 0, 0, 0, 0, 0, 0, 0};
  24          
  25          DATA u8 flag_nosched = 0;
  26          
  27          void __start_scheduler(u8 ms_per_interrupt)
  28          {
  29   1          //Set Timer0, Enable interrupt.
  30   1          {   
  31   2              XDATA TIM_InitTypeDef timer_settings;
  32   2              timer_settings.TIM_Mode = TIM_16BitAutoReload;
  33   2              timer_settings.TIM_Polity = PolityHigh;
  34   2              timer_settings.TIM_Interrupt = ENABLE;
  35   2              timer_settings.TIM_ClkSource = TIM_CLOCK_12T;
  36   2              timer_settings.TIM_ClkOut = DISABLE;
  37   2              timer_settings.TIM_Value = calc_TIM_from_ms_12t(ms_per_interrupt*2);
  38   2              timer_settings.TIM_Run = ENABLE;
  39   2              Timer_Inilize(Timer0, &timer_settings);
  40   2          }
  41   1      
  42   1          //Enable interrupts
  43   1          EA = 1;
  44   1      }
  45          
  46          void timer0_interrupt()
  47          {
  48   1          system_cycles++;
  49   1          remaining_timeslices--;
  50   1          decrement_sleep_counters();
  51   1      
  52   1          //Running atomic code, do not reschedule
  53   1          if(flag_nosched) return;
  54   1      
C51 COMPILER V9.60.0.0   SCHEDULER                                                         06/28/2022 07:49:22 PAGE 2   

  55   1          //Current process has remaining time slices, do not reschedule
  56   1          if(remaining_timeslices) return;
  57   1      //=============================================================================
  58   1      
  59   1          //Save interrupt frame of current process
  60   1          my_memcpy(interrupt_frames[current_process], __tmp_intframe, 16);
  61   1          //=========================================================================
  62   1      
  63   1          current_process = select_process();
  64   1          remaining_timeslices = proc_time_share[current_process];
  65   1      
  66   1          /*
  67   1          //Debug
  68   1          led_display_content = system_cycles>>4;
  69   1          DISP_LED();
  70   1          */
  71   1          
  72   1          //=========================================================================
  73   1          //Load interrupt frame of current process
  74   1          my_memcpy(__tmp_intframe, interrupt_frames[current_process], 16);
  75   1      }
  76          
  77          u8 select_process()
  78          {
  79   1          XDATA u8 tmp_process;
  80   1          tmp_process = current_process;
  81   1      
  82   1          //sequentially check other processes
  83   1          while((tmp_process = NEXT(tmp_process)) != current_process)
  84   1              if(process_ready(tmp_process))
  85   1                  return tmp_process;
  86   1      
  87   1          //if no other process can run, check if current process can run again
  88   1          if (process_ready(current_process))
  89   1              return current_process;
  90   1          
  91   1          //Can't find a process to run, Error code 1.
  92   1          error_spin(1);
  93   1      }
  94          
  95          u8 process_ready(u8 pid)
  96          {
  97   1          //Check process exists
  98   1          if(!PROC_EXISTS(pid))
  99   1              return 0;
 100   1      
 101   1          //Check process is not sleeping
 102   1          if(proc_sleep_countdown[pid])
 103   1              return 0;
 104   1      
 105   1          //Check process is not waiting for semaphore
 106   1          if(proc_waiting_sem & BIT(pid))
 107   1              return 0;
 108   1      
 109   1          //Check process is not waitiong for events
 110   1          if(proc_waiting_evt & BIT(pid))
 111   1              return 0;
 112   1              
 113   1          return 1;
 114   1      }
 115          
 116          u8 __start_process(PROCESS_ENTRY entry)
C51 COMPILER V9.60.0.0   SCHEDULER                                                         06/28/2022 07:49:22 PAGE 3   

 117          {
 118   1          XDATA u8 tmp_process;
 119   1          
 120   1          //find a slot for new process
 121   1          tmp_process = find_empty_slot();
 122   1          
 123   1          //create interrupt frame for process
 124   1          memzero(interrupt_frames[tmp_process], 16);
 125   1          interrupt_frames[tmp_process][INTFRM_ADDRLO] = ((u16)entry) & 0xff;
 126   1          interrupt_frames[tmp_process][INTFRM_ADDRHI] = (((u16)entry)>>8) & 0xff;
 127   1          interrupt_frames[tmp_process][INTFRM_STACKPTR] = __stack[tmp_process];
 128   1      
 129   1          //flag process existence
 130   1          process_slot |= BIT(tmp_process);
 131   1      
 132   1          return tmp_process;
 133   1      }
 134          
 135          u8 find_empty_slot()
 136          {
 137   1          XDATA u8 tmp_process;
 138   1      
 139   1          for(tmp_process = 0; tmp_process<8; tmp_process++)
 140   1          {
 141   2              if(!PROC_EXISTS(tmp_process))
 142   2              {
 143   3                  tmp_process |= BIT(7); //set this bit to indicate that a valid slot is found
 144   3                  break;
 145   3              }
 146   2          }
 147   1      
 148   1          //can't find a slot for new process
 149   1          if(!(tmp_process&BIT(7)))
 150   1              error_spin(2);
 151   1      
 152   1          return (tmp_process & 0x07); //remove the flag before returning
 153   1      }
 154          
 155          void decrement_sleep_counters()
 156          {
 157   1          COUNTDOWN(proc_sleep_countdown[0]);
 158   1          COUNTDOWN(proc_sleep_countdown[1]);
 159   1          COUNTDOWN(proc_sleep_countdown[2]);
 160   1          COUNTDOWN(proc_sleep_countdown[3]);
 161   1          COUNTDOWN(proc_sleep_countdown[4]);
 162   1          COUNTDOWN(proc_sleep_countdown[5]);
 163   1          COUNTDOWN(proc_sleep_countdown[6]);
 164   1          COUNTDOWN(proc_sleep_countdown[7]);
 165   1          
 166   1          sleep_check();
 167   1      }
 168          
 169          //process code -> __yield(asm) -> __reschedule -> return to __yield -> return to new context
 170          void __reschedule()
 171          {
 172   1          my_memcpy(interrupt_frames[current_process], __tmp_intframe, 16);
 173   1      
 174   1          current_process = select_process();
 175   1          remaining_timeslices = proc_time_share[current_process];
 176   1      
 177   1          my_memcpy(__tmp_intframe, interrupt_frames[current_process], 16);
 178   1      }
C51 COMPILER V9.60.0.0   SCHEDULER                                                         06/28/2022 07:49:22 PAGE 4   

 179          
 180          void sleep_check()
 181          {
 182   1          if (proc_sleep_countdown[0]) error_spin(10);
 183   1          //if (proc_sleep_countdown[1]) error_spin(11);
 184   1          //if (proc_sleep_countdown[2]) error_spin(12);
 185   1          //if (proc_sleep_countdown[3]) error_spin(13);
 186   1          //if (proc_sleep_countdown[4]) error_spin(14);
 187   1          //if (proc_sleep_countdown[5]) error_spin(15);
 188   1          //if (proc_sleep_countdown[6]) error_spin(16);
 189   1          //if (proc_sleep_countdown[7]) error_spin(17);
 190   1      }
*** WARNING C291 IN LINE 93 OF Src\scheduler\scheduler.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1228    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     46    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
