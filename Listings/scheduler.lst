C51 COMPILER V9.05   SCHEDULER                                                             06/28/2022 11:57:13 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE SCHEDULER
OBJECT MODULE PLACED IN .\Objects\scheduler.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Src\scheduler\scheduler.c LARGE OMF2 OPTIMIZE(0,SPEED) BROWSE NOAREGS DEFIN
                    -E(STC) DEBUG PRINT(.\Listings\scheduler.lst) OBJECT(.\Objects\scheduler.obj)

line level    source

   1          #include "scheduler.h"
   2          #include "../mem/mem.h"
   3          #include "../conc/semaphore.h"
   4          #include "../bit_ops/bit_ops.h"
   5          #include "../error/error.h"
   6          #include "../events/events.h"
   7          #include "../clock_util/clock_util.h"
   8          
   9          
  10          XDATA u8 current_process = 0;
  11          XDATA u32 system_cycles = 0;
  12          XDATA u8 process_slot = 1;
  13          
  14          XDATA u8 remaining_timeslices = DEFAULT_TIMESLICES;
  15          XDATA u8 proc_time_share[8] = {
  16              DEFAULT_TIMESLICES, DEFAULT_TIMESLICES,
  17              DEFAULT_TIMESLICES, DEFAULT_TIMESLICES,
  18              DEFAULT_TIMESLICES, DEFAULT_TIMESLICES,
  19              DEFAULT_TIMESLICES, DEFAULT_TIMESLICES
  20          };//This determines the number of timeslices assigned when each process is scheduled
  21          
  22          //Only processes with 0 sleep countdown can be scheduled
  23          XDATA u16 proc_sleep_countdown[8] ={0, 0, 0, 0, 0, 0, 0, 0};
  24          
  25          DATA u8 flag_nosched = 0;
  26          DATA u8 interrupt_counter = 0;
  27          
  28          void __start_scheduler(u8 ms_per_interrupt)
  29          {
  30   1          //Set Timer0, Enable interrupt.
  31   1          {   
  32   2              XDATA TIM_InitTypeDef timer_settings;
  33   2              timer_settings.TIM_Mode = TIM_16BitAutoReload;
  34   2              timer_settings.TIM_Polity = PolityHigh;
  35   2              timer_settings.TIM_Interrupt = ENABLE;
  36   2              timer_settings.TIM_ClkSource = TIM_CLOCK_12T;
  37   2              timer_settings.TIM_ClkOut = DISABLE;
  38   2              timer_settings.TIM_Value = calc_TIM_from_ms_12t(ms_per_interrupt*2);
  39   2              timer_settings.TIM_Run = ENABLE;
  40   2              Timer_Inilize(Timer0, &timer_settings);
  41   2          }
  42   1      
  43   1          //Enable interrupts
  44   1          EA = 1;
  45   1      }
  46          
  47          /*
  48                  timer0_interrupt might be skipped by flag_nosched. but interrupt_counter
  49                  always gets incremented in ISR, so this information can be used to fast 
  50                  forward system time.
  51          */
  52          void timer0_interrupt()
  53          {
  54   1          system_cycles += interrupt_counter;
C51 COMPILER V9.05   SCHEDULER                                                             06/28/2022 11:57:13 PAGE 2   

  55   1          COUNTDOWN(remaining_timeslices, interrupt_counter);
  56   1          decrement_sleep_counters();
  57   1              interrupt_counter = 0;
  58   1      
  59   1          //Running atomic code, do not reschedule
  60   1          if(flag_nosched) return;
  61   1      
  62   1          //Current process has remaining time slices, do not reschedule
  63   1          if(remaining_timeslices) return;
  64   1      //=============================================================================
  65   1      
  66   1          //Save interrupt frame of current process
  67   1          my_memcpy(interrupt_frames[current_process], __tmp_intframe, 16);
  68   1          //=========================================================================
  69   1      
  70   1          current_process = select_process();
  71   1          remaining_timeslices = proc_time_share[current_process];
  72   1      
  73   1          /*
  74   1          //Debug
  75   1          led_display_content = system_cycles>>4;
  76   1          DISP_LED();
  77   1          */
  78   1          
  79   1          //=========================================================================
  80   1          //Load interrupt frame of current process
  81   1          my_memcpy(__tmp_intframe, interrupt_frames[current_process], 16);
  82   1      }
  83          
  84          u8 select_process()
  85          {
  86   1          XDATA u8 tmp_process;
  87   1          tmp_process = current_process;
  88   1      
  89   1          //sequentially check other processes
  90   1          while((tmp_process = NEXT(tmp_process)) != current_process)
  91   1              if(process_ready(tmp_process))
  92   1                  return tmp_process;
  93   1      
  94   1          //if no other process can run, check if current process can run again
  95   1          if (process_ready(current_process))
  96   1              return current_process;
  97   1          
  98   1          //Can't find a process to run, Error code 1.
  99   1          error_spin(1);
 100   1      }
 101          
 102          u8 process_ready(u8 pid)
 103          {
 104   1          //Check process exists
 105   1          if(!PROC_EXISTS(pid))
 106   1              return 0;
 107   1      
 108   1          //Check process is not sleeping
 109   1          if(proc_sleep_countdown[pid])
 110   1              return 0;
 111   1      
 112   1          //Check process is not waiting for semaphore
 113   1          if(proc_waiting_sem & BIT(pid))
 114   1              return 0;
 115   1      
 116   1          //Check process is not waitiong for events
C51 COMPILER V9.05   SCHEDULER                                                             06/28/2022 11:57:13 PAGE 3   

 117   1          if(proc_waiting_evt & BIT(pid))
 118   1              return 0;
 119   1              
 120   1          return 1;
 121   1      }
 122          
 123          u8 __start_process(PROCESS_ENTRY entry)
 124          {
 125   1          XDATA u8 tmp_process;
 126   1          
 127   1          //find a slot for new process
 128   1          tmp_process = find_empty_slot();
 129   1          
 130   1          //create interrupt frame for process
 131   1          memzero(interrupt_frames[tmp_process], 16);
 132   1          interrupt_frames[tmp_process][INTFRM_ADDRLO] = ((u16)entry) & 0xff;
 133   1          interrupt_frames[tmp_process][INTFRM_ADDRHI] = (((u16)entry)>>8) & 0xff;
 134   1          interrupt_frames[tmp_process][INTFRM_STACKPTR] = __stack[tmp_process];
 135   1      
 136   1          //flag process existence
 137   1          process_slot |= BIT(tmp_process);
 138   1      
 139   1          return tmp_process;
 140   1      }
 141          
 142          u8 find_empty_slot()
 143          {
 144   1          XDATA u8 tmp_process;
 145   1      
 146   1          for(tmp_process = 0; tmp_process<8; tmp_process++)
 147   1          {
 148   2              if(!PROC_EXISTS(tmp_process))
 149   2              {
 150   3                  tmp_process |= BIT(7); //set this bit to indicate that a valid slot is found
 151   3                  break;
 152   3              }
 153   2          }
 154   1      
 155   1          //can't find a slot for new process
 156   1          if(!(tmp_process&BIT(7)))
 157   1              error_spin(2);
 158   1      
 159   1          return (tmp_process & 0x07); //remove the flag before returning
 160   1      }
 161          
 162          void decrement_sleep_counters()
 163          {
 164   1          COUNTDOWN(proc_sleep_countdown[0], interrupt_counter);
 165   1          COUNTDOWN(proc_sleep_countdown[1], interrupt_counter);
 166   1          COUNTDOWN(proc_sleep_countdown[2], interrupt_counter);
 167   1          COUNTDOWN(proc_sleep_countdown[3], interrupt_counter);
 168   1          COUNTDOWN(proc_sleep_countdown[4], interrupt_counter);
 169   1          COUNTDOWN(proc_sleep_countdown[5], interrupt_counter);
 170   1          COUNTDOWN(proc_sleep_countdown[6], interrupt_counter);
 171   1          COUNTDOWN(proc_sleep_countdown[7], interrupt_counter);
 172   1          sleep_check();
 173   1      }
 174          
 175          //process code -> __yield(asm) -> __reschedule -> return to __yield -> return to new context
 176          void __reschedule()
 177          {
 178   1          my_memcpy(interrupt_frames[current_process], __tmp_intframe, 16);
C51 COMPILER V9.05   SCHEDULER                                                             06/28/2022 11:57:13 PAGE 4   

 179   1      
 180   1          current_process = select_process();
 181   1          remaining_timeslices = proc_time_share[current_process];
 182   1      
 183   1          my_memcpy(__tmp_intframe, interrupt_frames[current_process], 16);
 184   1      }
 185          
 186          void sleep_check()
 187          {
 188   1          if (proc_sleep_countdown[0]) error_spin(10);
 189   1          //if (proc_sleep_countdown[1]) error_spin(11);
 190   1          //if (proc_sleep_countdown[2]) error_spin(12);
 191   1          //if (proc_sleep_countdown[3]) error_spin(13);
 192   1          //if (proc_sleep_countdown[4]) error_spin(14);
 193   1          //if (proc_sleep_countdown[5]) error_spin(15);
 194   1          //if (proc_sleep_countdown[6]) error_spin(16);
 195   1          //if (proc_sleep_countdown[7]) error_spin(17);
 196   1      }
*** WARNING C291 IN LINE 100 OF Src\scheduler\scheduler.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1495    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     46    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
