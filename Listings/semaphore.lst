C51 COMPILER V9.60.0.0   SEMAPHORE                                                         06/27/2022 18:15:30 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SEMAPHORE
OBJECT MODULE PLACED IN .\Objects\semaphore.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE Src\conc\semaphore.c OMF2 OPTIMIZE(0,SPEED) BROWSE DEFINE(STC
                    -) DEBUG PRINT(.\Listings\semaphore.lst) TABS(2) OBJECT(.\Objects\semaphore.obj)

line level    source

   1          #include "semaphore.h"
   2          
   3          XDATA char semaphores[MAX_SEMAPHORES];
   4          XDATA u8 proc_sem_wait_flag[MAX_SEMAPHORES];
   5          XDATA u8 sem_wake_round[MAX_SEMAPHORES];
   6          XDATA u8 proc_waiting = 0;
   7          
   8          void __sem_init(u8 sem_id, char val)
   9          {
  10   1          if (sem_id >= MAX_SEMAPHORES)
  11   1              error_spin(20);
  12   1              
  13   1          proc_sem_wait_flag[sem_id] = 0;
  14   1          sem_wake_round[sem_id] = 1;
  15   1          semaphores[sem_id] = val;
  16   1      }
  17          
  18          XDATA u8 select_wake;
  19          void __sem_post(u8 sem_id)
  20          {
  21   1          //No process is waiting, only increment semaphore
  22   1          if(!proc_sem_wait_flag[sem_id])
  23   1          {
  24   2              semaphores[sem_id]++;
  25   2              return;
  26   2          }
  27   1      
  28   1          //Find first process waiting on the semaphore
  29   1          select_wake = RSL(sem_wake_round[sem_id]);
  30   1          while ((select_wake & proc_sem_wait_flag[sem_id]) == 0)
  31   1              select_wake = RSL(select_wake);
  32   1      
  33   1          //Remove the waiting flag of the process
  34   1          proc_sem_wait_flag[sem_id] &= ~select_wake;
  35   1          proc_waiting &= ~select_wake;
  36   1      
  37   1          //Record the last waked process
  38   1          sem_wake_round[sem_id] = select_wake;
  39   1      }
  40          
  41          void __sem_wait(u8 sem_id)
  42          {
  43   1          ATOMIC_START();
  44   1      
  45   1          //semaphore currently idle, decrement value and return.
  46   1          if(semaphores[sem_id])
  47   1          {
  48   2              semaphores[sem_id] --;
  49   2              return;
  50   2          }
  51   1      
  52   1          /*  
  53   1              set current process waiting on semaphore, yield
  54   1              (and the process won't be selected by scheduler 
C51 COMPILER V9.60.0.0   SEMAPHORE                                                         06/27/2022 18:15:30 PAGE 2   

  55   1              until wait flag is cleared by some sem_post)
  56   1          */
  57   1      
  58   1          proc_sem_wait_flag[sem_id] |= BIT(current_process);
  59   1          proc_waiting |= BIT(current_process);
  60   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    401    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     26    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
